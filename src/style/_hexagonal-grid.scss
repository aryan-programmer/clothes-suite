// Media queries from https://github.com/web-tiki/responsive-grid-of-hexagons
// Hexagon shape from https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/

.hex-grid-vars {
	--hex-width: calc(var(--hex-width-orig) - var(--hex-margin) * 2 - 1px);
	--hex-height: calc(var(--hex-width) * 1.1547);
	--hex-margin: 12px;
}

.hex-grid {
	font-size: 0; /*disable white space between inline block element */
}

.hex {
	$m: 1;
	position: relative;
	width: var(--hex-width);
	margin: var(--hex-margin);
	padding-top: var(--hex-height);
	display: inline-block;
	font-size: initial;
	margin-bottom: calc(var(--hex-margin) - var(--hex-height) * 0.25);
	filter: drop-shadow(-3px*$m -3px*$m 6px*$m var(--light-bg-light-shadow)) drop-shadow(3px *$m 3px*$m 6px*$m var(--light-bg-dark-shadow));;
	transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out, filter .15s ease-in-out, transform .15s ease-in-out, width .15s ease-in-out, height .15s ease-in-out;

	& > * {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}

	& .hex-rounded {
		filter: url(#round);
	}

	& .hex-card {
		width: 100%;
		height: 100%;
		clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
		display: flex;
		justify-content: center;
		align-items: center;

		& > .hex-image {
			position: absolute;
			width: 85%;
			height: 85%;
			clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
			transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out, filter .15s ease-in-out, transform .15s ease-in-out, width .15s ease-in-out, height .15s ease-in-out;
		}

		& > .hex-content {
			position: absolute;
			width: 100%;
			height: 50%;
			top: 25%;
		}
	}
}

.hex:has(.hex-button:hover) {
	$m: 0.5;
	filter: drop-shadow(-3px*$m -3px*$m 6px*$m var(--light-bg-light-shadow)) drop-shadow(3px *$m 3px*$m 6px*$m var(--light-bg-dark-shadow));;
	//filter: none;
}

.hex:has(.hex-button:active) {
	filter: none;
}

.hex-button {
	&:hover {
		cursor: pointer;

		.hex-image {
			//width: 90% !important;
			//height: 90% !important;
		}
	}

	&:active {
		cursor: pointer;
		//filter: none;

		.hex-image {
			$m: 1;
			width: 100% !important;
			height: 100% !important;
		}
	}
}

/*** HEXAGON SIZING AND EVEN ROW INDENTATION *****************************************************************/
@include media-breakpoint-up(lg) { /* <- 5-4  hexagons per row */
	.hex-grid-vars {
		--hex-width-orig: 20%; /* = 100 / 5 */
	}
	.hex:nth-child(9n+6) { /* first hexagon of even rows */
		margin-left: calc(10% + var(--hex-margin)); /* = width of .hex / 2  to indent even rows */
	}
}

@include media-breakpoint-only(md) { /* <- 4-3  hexagons per row */
	.hex-grid-vars {
		--hex-width-orig: 25%; /* = 100 / 4 */
	}
	.hex:nth-child(7n+5) { /* first hexagon of even rows */
		margin-left: calc(12.5% + var(--hex-margin)); /* = width of .hex / 2  to indent even rows */
	}
}

$sm-min:  breakpoint-min(sm, $grid-breakpoints);
$md-max:  breakpoint-max(md, $grid-breakpoints);
$cutoff: 750px;

@media (min-width: $cutoff) and (max-width: $md-max)  { /* <- 3-2  hexagons per row */
	.hex-grid-vars {
		--hex-width-orig: 33.333%; /* = 100 / 3 */
	}
	.hex:nth-child(5n+4) { /* first hexagon of even rows */
		margin-left: calc(16.666% + var(--hex-margin)); /* = width of .hex / 2  to indent even rows */
	}
}

@media (max-width: $cutoff) { /* <- 2-1  hexagons per row */
	.hex-grid-vars {
		--hex-width-orig: 50%; /* = 100 / 2 */
	}
	.hex:nth-child(3n+3) { /* first hexagon of even rows */
		margin-left: calc(25% + var(--hex-margin)); /* = width of .hex / 2  to indent even rows */
	}
}
